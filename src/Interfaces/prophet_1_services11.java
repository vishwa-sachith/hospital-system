/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nayan
 */
public class prophet_1_services11 extends javax.swing.JFrame {

    String admit_id, room_id, patients_id;
    double charge = 0, test_charge = 0, med_charge = 0, total1 = 0.0, netTotal, bal;
    int myStatus;

    public prophet_1_services11() {
        initComponents();
        exit.setContentAreaFilled(false);
        Minimize.setContentAreaFilled(false);
        aid.grabFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        exit = new javax.swing.JButton();
        Minimize = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        Exit = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        staffid = new javax.swing.JLabel();
        stafftype = new javax.swing.JLabel();
        s1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        sst = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        time = new javax.swing.JTextField();
        date = new javax.swing.JTextField();
        minimize1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        aid = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        p_name = new javax.swing.JLabel();
        p_bloodGroup = new javax.swing.JLabel();
        p_nic = new javax.swing.JLabel();
        p_dob = new javax.swing.JLabel();
        p_gender = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        p_regDate = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        jLabel25 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        testTabe = new javax.swing.JTable();
        discount = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        medTable = new javax.swing.JTable();
        net_total = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        text = new javax.swing.JLabel();
        payment = new javax.swing.JTextField();
        balance = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 251));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(129, 148, 220)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jPanel1.add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1320, 10, 30, 30));

        Minimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MinimizeActionPerformed(evt);
            }
        });
        jPanel1.add(Minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 10, 30, 30));

        logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logout.png"))); // NOI18N
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        jPanel1.add(logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 100, 30, 30));

        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Close Window-48.png"))); // NOI18N
        jPanel1.add(Exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1320, 10, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logo.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 420, 150));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 1330, 10));

        staffid.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(staffid, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 60, 110, 30));

        stafftype.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(stafftype, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 100, 110, 30));

        s1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        s1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/fields.png"))); // NOI18N
        jPanel1.add(s1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 60, 110, 30));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/user-icon.png"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 60, 30, 30));

        sst.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/fields.png"))); // NOI18N
        jPanel1.add(sst, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 100, 110, 30));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/hori separator.png"))); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 20, 10, 140));

        jLabel7.setText("Date");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 100, 40, 30));

        jLabel13.setText("Time");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 50, 40, 30));

        time.setEditable(false);
        time.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        time.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        time.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        jPanel1.add(time, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 50, 110, 30));

        date.setEditable(false);
        date.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        date.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        date.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        jPanel1.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 100, 110, 30));

        minimize1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Minimize Window-48.png"))); // NOI18N
        jPanel1.add(minimize1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 10, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("All Charges");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 150, 110, 20));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Patient ID      :");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, -1, -1));

        aid.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        aid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aidActionPerformed(evt);
            }
        });
        jPanel1.add(aid, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 140, -1));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Name     :");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Nic        :");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("DOB      :");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Gender  :");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel22.setText("Blood Group :");
        jPanel2.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, -1, -1));

        p_name.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel2.add(p_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 410, 20));

        p_bloodGroup.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel2.add(p_bloodGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 70, 160, 20));

        p_nic.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel2.add(p_nic, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 70, 170, 20));

        p_dob.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel2.add(p_dob, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 170, 20));

        p_gender.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel2.add(p_gender, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 130, 170, 20));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setText("Reg Date    :");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, -1, -1));

        p_regDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel2.add(p_regDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 110, 120, 20));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 590, 170));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Charges Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room ID/ Ward ID/ Service ID", "Type", "Other", "Charges per day", "Date", "Day count", "Total Charge"
            }
        ));
        table1.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(table1);

        jPanel6.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 710, 170));

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 190, 740, 220));

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/printbill.png"))); // NOI18N
        jLabel25.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel25MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel25MouseEntered(evt);
            }
        });
        jPanel1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 700, -1, 50));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Total      :");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 600, -1, -1));

        total.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel1.add(total, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 580, 150, 40));

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel26.setText("Discount  :");
        jPanel1.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 640, -1, -1));

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel27.setText("Net Total :");
        jPanel1.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 680, -1, -1));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Medical Test Charges", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        testTabe.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        testTabe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Test Name", "Charges"
            }
        ));
        jScrollPane2.setViewportView(testTabe);

        jPanel8.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 690, 110));

        jPanel1.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 410, 740, 170));

        discount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        discount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discountActionPerformed(evt);
            }
        });
        jPanel1.add(discount, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 640, 130, -1));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Medicines", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        medTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        medTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Item", "Qty", "Price"
            }
        ));
        jScrollPane3.setViewportView(medTable);

        jPanel7.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 530, 250));

        jPanel1.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 440, 580, 300));

        net_total.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(net_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 680, 120, 20));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel14.setText("Payment    :");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 600, -1, -1));

        text.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        text.setText("Balance       :");
        jPanel1.add(text, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 640, -1, -1));

        payment.setEditable(false);
        payment.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentActionPerformed(evt);
            }
        });
        jPanel1.add(payment, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 600, 160, 25));

        balance.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(balance, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 640, 160, 20));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1380, 760));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        try {
            System.exit(0);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_exitActionPerformed

    private void MinimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MinimizeActionPerformed
        try {
            this.setState(ICONIFIED);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_MinimizeActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        try {
            this.dispose();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_logoutActionPerformed

    private void aidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aidActionPerformed
        //Admit_id, Patients_ID, Room_id, Date, staff_Staff_id, status_Status_no
        //Room_id, Type, Price, status_Status_no
        //Admit_id, Sypmtom, Patients_ID, Wards_id, Date, avalible_beds_No, staff_Staff_id, status_Status_no
        //Wards_id, Name, Type, Beds, Price, status_Status_no
        //Service_id, Service_name, Service_price, Service_description, status_Status_no
        //Service_patient_id_room, Date, Time, Service_id, Patients_ID, Admit_id

        try {
            ResultSet rss = DB_connection.search("select * from patients_reg where Patients_ID='" + aid.getText() + "'");
            if (rss.next()) {
                DefaultTableModel dtm = (DefaultTableModel) table1.getModel();
                DefaultTableModel dtm2 = (DefaultTableModel) table1.getModel();
                DefaultTableModel dtm3 = (DefaultTableModel) testTabe.getModel();
                DefaultTableModel dtm4 = (DefaultTableModel) medTable.getModel();
                try {
                    ResultSet rs = DB_connection.search("select * from admit_details_room where Patients_ID='" + aid.getText() + "' AND status_Status_no='1'");
                    if (rs.next()) {
                        room_id = rs.getString("Room_id");
                        admit_id = rs.getString("Admit_id");
                        patients_id = rs.getString("Patients_ID");
                        ResultSet rs1 = DB_connection.search("select * from rooms where Room_id='" + room_id + "'");
                        if (rs1.next()) {
                            String room_type = rs1.getString("Type");
                            String room_price = rs1.getString("Price");
                            Vector v = new Vector();
                            v.add(room_id);
                            v.add("Room");
                            v.add(room_type);
                            v.add(room_price);
                            v.add(rs.getString("Date"));
                            String serviceDate = rs.getString("Date");
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                            Date startDate1 = sdf.parse(serviceDate);
                            String dt1 = sdf.format(startDate1);
                            Date d1 = null;
                            Date d2 = null;
                            d1 = sdf.parse(sdf.format(startDate1));
                            d2 = sdf.parse(sdf.format(new Date()));
                            System.out.println("dddddd" + d1);
                            long diff = d2.getTime() - d1.getTime();
                            long sec = diff / 1000 % 60;
                            long min = diff / (60 * 1000) % 60;
                            long hours = diff / (60 * 60 * 1000);
                            long days = hours / 24;
                            v.add(days);
                            int price = Integer.parseInt(room_price);
                            int dayCount = Integer.parseInt(Long.toString(days));
                            int totl = price * dayCount;
                            v.add(totl);
                            dtm.addRow(v);
                            System.out.println(admit_id);
                            ResultSet rs6 = DB_connection.search("select * from admit_patients_service_rooms where Admit_id='" + admit_id + "'");
                            while (rs6.next()) {
                                String service_id = rs6.getString("Service_id");
                                ResultSet rs5 = DB_connection.search("select * from services where Service_id='" + service_id + "'");
                                while (rs5.next()) {
                                    Vector v1 = new Vector();
                                    v1.add(rs5.getString("Service_id"));
                                    v1.add(rs5.getString("Service_name"));
                                    v1.add(rs5.getString("Service_description"));
                                    v1.add(rs5.getString("Service_price"));
                                    v1.add(rs6.getString("Date"));

                                    String serviceDate12 = rs6.getString("Date");
                                    System.out.println("service date" + " " + serviceDate12);
                                    SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
                                    Date startDate2 = sdf1.parse(serviceDate12);
                                    String dt2 = sdf1.format(startDate2);
                                    Date dd1 = null;
                                    Date dd2 = null;
                                    dd1 = sdf1.parse(sdf1.format(startDate2));
                                    dd2 = sdf1.parse(sdf1.format(new Date()));
                                    System.out.println("dddddd" + dd1);
                                    long diff1 = dd2.getTime() - dd1.getTime();
                                    long sec1 = diff1 / 1000 % 60;
                                    long min1 = diff1 / (60 * 1000) % 60;
                                    long hours1 = diff1 / (60 * 60 * 1000);
                                    long days1 = hours1 / 24;
                                    v1.add(days1);

                                    int price2 = Integer.parseInt(rs5.getString("Service_price"));
                                    int dayCount2 = Integer.parseInt(Long.toString(days1));
                                    int tot2 = price2 * dayCount2;
                                    v1.add(tot2);
                                    dtm2.addRow(v1);
                                }
                            }
                            for (int i = 0; i < table1.getRowCount(); i++) {
                                charge += Double.parseDouble(dtm2.getValueAt(i, 6).toString());
                            }
                            total.setText(charge + "");
                        }
                    } else {
                        ResultSet rs2 = DB_connection.search("select * from admit_details_ward where Patients_ID='" + aid.getText() + "' AND status_Status_no='1'");
                        if (rs2.next()) {
                            String ward_id = rs2.getString("Wards_id");
                            ResultSet rs3 = DB_connection.search("select * from wards where Wards_id='" + ward_id + "'");
                            if (rs3.next()) {
//                        type1.setText(rs3.getString("Type"));
//                        charge.setText(rs3.getString("Price"));
                            }
                        }
                    }
                    setPatient_Details();
                    setMedicalTestCharges();
                    setMedCharges();
                    for (int i = 0; i < testTabe.getRowCount(); i++) {
                        test_charge += Double.parseDouble(dtm3.getValueAt(i, 2).toString());
                    }
                    total.setText(charge + test_charge + "");

                    for (int i = 0; i < medTable.getRowCount(); i++) {
                        med_charge += Double.parseDouble(dtm4.getValueAt(i, 3).toString());
                    }
                    total.setText(charge + test_charge + med_charge + "");
                    total1 = charge + test_charge + med_charge;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                JOptionPane.showConfirmDialog(this, "Please check Patient ID again", "System", JOptionPane.CLOSED_OPTION);
                aid.grabFocus();
                aid.setText(null);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        discount.grabFocus();
    }//GEN-LAST:event_aidActionPerformed

    private void discountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discountActionPerformed
        Double dis = Double.parseDouble(discount.getText());
        netTotal = total1 * dis / 100;
        net_total.setText(total1 - netTotal + "");
        payment.grabFocus();
        payment.setEditable(true);
    }//GEN-LAST:event_discountActionPerformed

    private void paymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentActionPerformed
        double total = Double.parseDouble(net_total.getText());
        double pay = Double.parseDouble(payment.getText());
        if (pay >= total) {
            text.setText("Balance   :");
            bal = pay - total;
            balance.setText("" + bal);
            myStatus = 1;
        } else if (pay < total) {
            text.setText("Due       :");
            bal = total - pay;
            balance.setText("" + bal);
            myStatus = 2;
        }
    }//GEN-LAST:event_paymentActionPerformed

    private void jLabel25MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel25MouseClicked
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat sdf1 = new SimpleDateFormat("HH:mm:ss");
        Date d = new Date();
        String date1 = sdf.format(d);
        String time1 = sdf1.format(d);
        System.out.println("admit id " + admit_id);
        int x = JOptionPane.showConfirmDialog(this, "Are you sure?", "System", JOptionPane.OK_CANCEL_OPTION);
        if (x==0){
            if (myStatus == 1) {
            try {
                DB_connection.iud("insert into bill (Admit_Id, Patients_ID, Date, Time, Total, Discount, Net_Total, Payment, Balance, Staff_id, status) values('"+admit_id+"','" + aid.getText() + "','" + date1 + "','" + time1 + "','" + total.getText() + "',"
                        + "'" + discount.getText() + "','" + net_total.getText() + "','" + payment.getText() + "','" + balance.getText() + "','"+staffid.getText()+"', '0')");
                JOptionPane.showConfirmDialog(this, "Success", "System", JOptionPane.CLOSED_OPTION);
                resetAll();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (myStatus == 2) {
             try {
                DB_connection.iud("insert into bill (Admit_Id, Patients_ID, Date, Time, Total, Discount, Net_Total, Payment, Due, Staff_id, status) values('"+admit_id+"','" + aid.getText() + "','" + date1 + "','" + time1 + "','" + total.getText() + "',"
                        + "'" + discount.getText() + "','" + net_total.getText() + "','" + payment.getText() + "','" + balance.getText() + "','"+staffid.getText()+"', '1')");
                 JOptionPane.showConfirmDialog(this, "Success", "System", JOptionPane.CLOSED_OPTION);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        }
        this.dispose();
    }//GEN-LAST:event_jLabel25MouseClicked

    private void jLabel25MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel25MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel25MouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(prophet_1_services11.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(prophet_1_services11.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(prophet_1_services11.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(prophet_1_services11.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new prophet_1_services11().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Exit;
    private javax.swing.JButton Minimize;
    private javax.swing.JTextField aid;
    private javax.swing.JLabel balance;
    private javax.swing.JTextField date;
    private javax.swing.JTextField discount;
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton logout;
    private javax.swing.JTable medTable;
    private javax.swing.JLabel minimize1;
    private javax.swing.JLabel net_total;
    private javax.swing.JLabel p_bloodGroup;
    private javax.swing.JLabel p_dob;
    private javax.swing.JLabel p_gender;
    private javax.swing.JLabel p_name;
    private javax.swing.JLabel p_nic;
    private javax.swing.JLabel p_regDate;
    private javax.swing.JTextField payment;
    private javax.swing.JLabel s1;
    private javax.swing.JLabel sst;
    private javax.swing.JLabel staffid;
    private javax.swing.JLabel stafftype;
    private javax.swing.JTable table1;
    private javax.swing.JTable testTabe;
    private javax.swing.JLabel text;
    private javax.swing.JTextField time;
    private javax.swing.JLabel total;
    // End of variables declaration//GEN-END:variables

    private void setPatient_Details() {
        //(patient_address)Country, Province, District, City, Street, House_no, Patients_ID
        //(patients_reg)Patients_ID, Fname, Lname, Nic_no, Dob, Gender, Mobile, Home_no, Email, Status_no, Blood_group
        //(blood)Blood_id, Type 
        //(admit_details_room)Admit_id, Patients_ID, Room_id, Date, staff_Staff_id, status_Status_no
        try {
            // ResultSet rs = DB_connection.search("select * from patients_reg NATURAL JOIN patient_address where Patients_ID='" + patients_id + "'");
            ResultSet rs = DB_connection.search("select * from patients_reg where Patients_ID='" + patients_id + "'");
            if (rs.next()) {
                p_name.setText(rs.getString("Fname") + " " + rs.getString("Lname"));
                p_nic.setText(rs.getString("Nic_no"));
                p_dob.setText(rs.getString("Dob"));
                if (rs.getString("Gender").equals("1")) {
                    p_gender.setText("Male");
                } else {
                    p_gender.setText("Female");
                }
                String bloodGroupID = rs.getString("Blood_group");
                ResultSet rs1 = DB_connection.search("select * from blood where Blood_id='" + bloodGroupID + "'");
                if (rs1.next()) {
                    p_bloodGroup.setText(rs1.getString("Type"));
                }
//                p_country.setText(rs.getString("Country"));
//                p_province.setText(rs.getString("Province"));
//                p_district.setText(rs.getString("District"));
//                p_city.setText(rs.getString("Street"));
//                p_street.setText(rs.getString("City"));
//                p_housename.setText(rs.getString("House_no"));
//                p_mobile.setText(rs.getString("Mobile"));
//                p_home.setText(rs.getString("Home_no"));
//                p_email.setText(rs.getString("Email"));
            }
            ResultSet rs2 = DB_connection.search("select * from admit_details_room NATURAL JOIN staff where Patients_ID='" + patients_id + "'");
            if (rs2.next()) {
                p_regDate.setText(rs2.getString("Date"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void setMedicalTestCharges() {
        DefaultTableModel dtm = (DefaultTableModel) testTabe.getModel();
        System.out.println("admitId" + admit_id);
        int count = 1;
        try {
            ResultSet rs = DB_connection.search("select * from complete_blood_count where Admit_id='" + admit_id + "'");
            if (rs.next()) {
                ResultSet rs1 = DB_connection.search("select * from test where Test_id='1'");
                if (rs1.next()) {
                    Vector v = new Vector();
                    v.add(count);
                    v.add(rs1.getString("Test_name"));
                    v.add(rs1.getString("Price"));
                    dtm.addRow(v);
                }
            }

            ResultSet rs2 = DB_connection.search("select * from urin_full_test_report where Admit_id='" + admit_id + "'");
            if (rs2.next()) {
                ResultSet rs1 = DB_connection.search("select * from test where Test_id='4'");
                if (rs1.next()) {
                    Vector v = new Vector();
                    v.add(count);
                    v.add(rs1.getString("Test_name"));
                    v.add(rs1.getString("Price"));
                    dtm.addRow(v);
                }
            }

            ResultSet rs3 = DB_connection.search("select * from profile_liver where Admit_id='" + admit_id + "'");
            if (rs3.next()) {
                ResultSet rs1 = DB_connection.search("select * from test where Test_id='3'");
                if (rs1.next()) {
                    Vector v = new Vector();
                    v.add(count);
                    v.add(rs1.getString("Test_name"));
                    v.add(rs1.getString("Price"));
                    dtm.addRow(v);
                }
            }

            ResultSet rs4 = DB_connection.search("select * from lipid_profile_report where Admit_id='" + admit_id + "'");
            if (rs4.next()) {
                ResultSet rs1 = DB_connection.search("select * from test where Test_id='2'");
                if (rs1.next()) {
                    Vector v = new Vector();
                    v.add(count);
                    v.add(rs1.getString("Test_name"));
                    v.add(rs1.getString("Price"));
                    dtm.addRow(v);
                }
            }
        } catch (Exception e) {
        }
    }

    private void setMedCharges() {
        DefaultTableModel dtm = (DefaultTableModel) medTable.getModel();
        int count = 1;
        try {
            ResultSet rs = DB_connection.search("select * from patients_has_items NATURAL JOIN items where Admit_id='" + admit_id + "' AND patients_has_items.Status_no='1'");
            while (rs.next()) {
                Vector v = new Vector();
                v.add(count);
                v.add(rs.getString("Item_Name"));
                v.add(rs.getString("QTY"));
                v.add(rs.getString("Price"));
                dtm.addRow(v);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void resetAll() {
       aid.setText(null);
       aid.grabFocus();
       p_name.setText(null);
       p_nic.setText(null);
       p_dob.setText(null);
       p_bloodGroup.setText(null);
       p_gender.setText(null);
       p_regDate.setText(null);
       DefaultTableModel dtm=(DefaultTableModel) medTable.getModel();
       DefaultTableModel dtm1=(DefaultTableModel) table1.getModel();
       DefaultTableModel dtm2=(DefaultTableModel) testTabe.getModel();
       dtm.setRowCount(0);
       dtm1.setRowCount(0);
       dtm2.setRowCount(0);
       total.setText(null);
       net_total.setText(null);
       discount.setText(null);
       payment.setText(null);
       balance.setText(null);
    }
}
